version: '3.8'

services:
  # VPP 主应用 - 生产环境配置
  vpp-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vpp-app-prod
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JAVA_OPTS=-Xms2g -Xmx4g -XX:+UseG1GC
    depends_on:
      - postgres
      - redis
      - kafka
    volumes:
      - ./logs:/app/logs
    networks:
      - vpp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 数据库
  postgres:
    image: postgres:13-alpine
    container_name: vpp-postgres-prod
    environment:
      - POSTGRES_DB=vpp_db
      - POSTGRES_USER=vpp_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - vpp-network
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: vpp-redis-prod
    volumes:
      - redis-data:/data
    networks:
      - vpp-network
    restart: unless-stopped

  # Kafka 消息队列
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: vpp-kafka-prod
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - vpp-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: vpp-zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - vpp-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  kafka-data:
  zookeeper-data:

networks:
  vpp-network:
    driver: bridge
