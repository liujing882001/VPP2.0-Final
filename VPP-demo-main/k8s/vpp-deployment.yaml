# VPP 2.0 Kubernetes 部署配置
apiVersion: v1
kind: Namespace
metadata:
  name: vpp-system
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: vpp-config
  namespace: vpp-system
data:
  application.properties: |
    spring.application.name=VirtualPowerPlant
    server.port=8080
    spring.profiles.active=k8s
---
# Secret for sensitive data
apiVersion: v1  
kind: Secret
metadata:
  name: vpp-secrets
  namespace: vpp-system
type: Opaque
data:
  db-password: dnBwX3Bhc3N3b3Jk # base64 encoded 'vpp_password'
  jwt-secret: dnBwX2p3dF9zZWNyZXRfa2V5 # base64 encoded 'vpp_jwt_secret_key'
---
# VPP Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpp-app
  namespace: vpp-system
  labels:
    app: vpp-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vpp-app
  template:
    metadata:
      labels:
        app: vpp-app
    spec:
      containers:
      - name: vpp-app
        image: vpp:latest
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "k8s"
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vpp-secrets
              key: db-password
        - name: REDIS_HOST
          value: "redis-service"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
---
# VPP Service
apiVersion: v1
kind: Service
metadata:
  name: vpp-service
  namespace: vpp-system
spec:
  selector:
    app: vpp-app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: LoadBalancer
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: vpp-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13-alpine
        env:
        - name: POSTGRES_DB
          value: vpp_db
        - name: POSTGRES_USER
          value: vpp_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vpp-secrets
              key: db-password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: vpp-system
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: vpp-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
