server.port=${HTTP_BIND_PORT:39090}
#server.httpPort=${HTTP_BIND_PORT:39091}
suanfaOptimizationApi=http://127.0.0.1:13350/Optimization
suanfaBackCalcApi=http://127.0.0.1:13351/BackCalc
chat.server.elebill.url=http://112.111.7.68:13390/copilot
chat.server.authorization=Basic YmFja2VuZF9hY2NvdW50OmJhY2tlbmRfMjAyNDA1MzA=
#loadType  \u8D1F\u8377\u7C7B   resourcesType  \u9ED8\u8BA4\u8D44\u6E90\u7C7B
os.type=${OS_TYPE:resourcesType}
os.foot=${OS_FOOT:\u4E0A\u6D77\u8FBE\u536F\u79D1\u6280\u6709\u9650\u516C\u53F8<br/>\u4E2D\u56FD\uFF08\u4E0A\u6D77\uFF09\u81EA\u7531\u8D38\u6613\u8BD5\u9A8C\u533A\u4E34\u6E2F\u65B0\u7247\u533A\u73AF\u6E56\u897F\u4E8C\u8DEF888\u53F7C\u697C<br/>\u4EACICP\u59072021033063\u53F7-1}
##############Redis#######################################
#\u662F\u5426\u662F\u5355\u673A\u73AF\u5883\u3002\u9ED8\u8BA4\u5355\u673A
spring.redis.standalone=${REDIS_STANDALONE:true}
#\u5F00\u542FRedis\u914D\u7F6E
spring.redis.open=true
spring.redis.password=${REDIS_PASSWORD:QTparking123456@}
# db index
spring.redis.database=0
#Standalone\u6A21\u5F0F \u5355\u70B9\u6A21\u5F0Fip (spring.redis.standalone=true)
spring.redis.host=${REDIS_HOST:47.100.89.197}
spring.redis.port=${REDIS_PORT:6379}
#Cluster\u6A21\u5F0F \u96C6\u7FA4\u6A21\u5F0Fip (spring.redis.standalone=false)
spring.redis.cluster.nodes=${REDIS_NODES:47.100.89.197:7000,47.100.89.197:7001,47.100.89.197:7002,47.100.89.197:7003,47.100.89.197:7004,47.100.89.197:7005}
spring.redis.cluster.max-redirects=12
#\u8FDE\u63A5\u6C60\u6700\u5927\u8FDE\u63A5\u6570
spring.redis.jedis.pool.max-active=1000
#\u8FDE\u63A5\u6C60\u6700\u5927\u963B\u585E\u7B49\u5F85\u65F6\u95F4(\u4F7F\u7528\u8D1F\u503C\u6CA1\u6709\u9650\u5236)
spring.redis.jedis.pool.max-wait=-1
#\u8FDE\u63A5\u6C60\u4E2D\u7684\u6700\u5927\u7A7A\u95F2\u8FDE\u63A5
spring.redis.jedis.pool.max-idle=10
#\u8FDE\u63A5\u6C60\u4E2D\u7684\u6700\u5C0F\u7A7A\u95F2\u8FDE\u63A5
spring.redis.jedis.pool.min-idle=5
spring.redis.timeout=30000
##############Postgresql??#######################################
#postgresql
    spring.datasource.driverClassName=${SPRING_DRIVER_CLASS_NAME:org.postgresql.Driver}
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://47.100.89.197:5432/damao_vpp_01_00_00_resource_slice_test}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:QTparking123456@}
#maximumPoolSize
#\u914D\u7F6E\u5141\u8BB8\u8FDE\u63A5\u6C60\u8FBE\u5230\u7684\u6700\u5927\u8FDE\u63A5\u6570\uFF08\u5305\u62EC\u7A7A\u95F2\u548C\u6B63\u5728\u4F7F\u7528\u7684\uFF09\uFF0C\u5F53\u6C60\u4E2D\u8FDE\u63A5\u8FBE\u5230maximumPoolSize\uFF0C\u4E14\u90FD\u4E0D\u7A7A\u95F2\uFF0C
#\u5F53\u6709\u65B0\u8BF7\u6C42\u4ECE\u6C60\u4E2D\u7533\u8BF7\u8FDE\u63A5\u6C60\u4F1A\u963B\u585E\u7B49\u5F85\u53EF\u7528\u8FDE\u63A5\uFF0C\u8FBE\u5230connectionTimeout\u8FD8\u4E0D\u80FD\u7533\u8BF7\u6210\u529F\uFF0C\u5219\u629B\u51FASQLException\u3002
#\u7F3A\u7701\uFF1A10
#\u6700\u4F73\u5B9E\u8DF5\uFF1A\u6839\u636E\u5B9E\u9645\u73AF\u5883\u914D\u7F6E\uFF0C\u901A\u5E38\u8BBE\u7F6E\u4E3A\u6838\u5FC3\u6570\u76842\u500D\u8F83\u4F18
spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:50}
#maxLifetime\u8BE5\u5C5E\u6027\u7528\u4E8E\u63A7\u5236\u8FDE\u63A5\u5728\u6C60\u4E2D\u7684\u6700\u5927\u751F\u5B58\u65F6\u95F4\uFF0C\u8D85\u8FC7\u8BE5\u65F6\u95F4\u5F3A\u5236\u9010\u51FA\uFF0C\u8FDE\u63A5\u6C60\u5411\u6570\u636E\u7533\u8BF7\u65B0\u7684\u8FDE\u63A5\u8FDB\u884C\u8865\u5145\u3002
#\u6CE8\u610F\uFF1A\u5F53\u524D\u6B63\u5728\u4F7F\u7528\u7684\u8FDE\u63A5\u4E0D\u4F1A\u5F3A\u5236\u9010\u51FA\uFF0C\u54EA\u6015\u5B83\u7684\u7D2F\u8BA1\u65F6\u95F4\u5DF2\u7ECF\u5230\u4E86maxLifetime\u3002
#\u5F3A\u70C8\u5EFA\u8BAE\u8BBE\u7F6E\u8BE5\u5C5E\u6027\uFF0C\u53EF\u8BBE\u7F6E\u7684\u6BD4\u6570\u636E\u5E93\u6216\u7F51\u7EDC\u57FA\u7840\u8BBE\u65BD\u5141\u8BB8\u7684\u6700\u5927\u8FDE\u63A5\u65F6\u95F4\u5C0F\u4E00\u4E9B\u3002
#\u5982\u6570\u636E\u5E93\u8FDE\u63A5\u6700\u5927\u5931\u6548\u65F6\u95F4\u662F8\u5C0F\u65F6\uFF0C\u53EF\u8BBE\u7F6E\u4E3A4\u5C0F\u65F6\u3002
# \u7F3A\u7701\uFF1A1800000\uFF0C \u537330min\u6700\u5C0F\u53EF\u914D\u7F6E\uFF1A30000\uFF0C\u537330s
#\u6700\u4F73\u5B9E\u8DF5\uFF1A\u9700\u8981\u8BBE\u7F6E\uFF0C\u6839\u636E\u6570\u636E\u5E93\u6216\u7F51\u7EDC\u57FA\u7840\u8BBE\u65BD\u7684\u60C5\u51B5\uFF0C\u6BD4\u5B83\u4EEC\u5C0F\u4E00\u4E9B
spring.datasource.hikari.max-lifetime=${SPRING_DATASOURCE_MAX_LIFETIME:60000}
#connectionTimeout\u63A7\u5236\u4E00\u4E2A\u5BA2\u6237\u7AEF\u7B49\u5F85\u4ECE\u6C60\u4E2D\u83B7\u53D6\u8FDE\u63A5\u7684\u6700\u5927\u65F6\u95F4\u3002\u8D85\u8FC7\u8BE5\u65F6\u95F4\u8FD8\u83B7\u53D6\u4E0D\u5230\u8FDE\u63A5\u5219\u629B\u51FASQLException\uFF0C
# \u6700\u4F4E\u53EF\u8BBE\u7F6E\u7684\u65F6\u95F4\u662F250ms\uFF0C
# \u7F3A\u7701\uFF1A30000ms
spring.datasource.hikari.connection-timeout=${SPRING_DATASOURCE_CONNECTION_TIMEOUT:10000}
spring.datasource.hikari.validation-timeout=${SPRING_DATASOURCE_VALIDATION_TIMEOUT:3000}
#idleTimeout\u63A7\u5236\u7A7A\u95F2\u8FDE\u63A5\u7684\u5728\u6C60\u4E2D\u6700\u5927\u7684\u7A7A\u95F2\u65F6\u95F4\u3002\u6CE8\u610F\uFF1A\u8FD9\u4E2A\u914D\u7F6E\u53EA\u6709\u5F53\u914D\u7F6E\u4E86minimumIdle\u5C5E\u6027(\u8868\u793A\u5141\u8BB8\u7684\u6700\u5C0F\u7A7A\u95F2\u8FDE\u63A5\u6570)\uFF0C
# \u4E14\u6BD4maximumPoolSize\uFF08\u8868\u793A\u6C60\u4E2D\u5141\u8BB8\u7684\u6700\u5927\u8FDE\u63A5\u6570\uFF09\u66F4\u5C0F\u65F6\u624D\u751F\u6548
spring.datasource.hikari.idle-timeout=${SPRING_DATASOURCE_IDLE_TIMEOUT:12000}
spring.datasource.hikari.login-timeout=${SPRING_DATASOURCE_LOGIN_TIMEOUT:5}
#minimumIdle
#\u914D\u7F6E\u8FDE\u63A5\u6C60\u6700\u5C0F\u7A7A\u95F2\u8FDE\u63A5\u6570\u3002\u4E3A\u4E86\u6027\u80FD\u6700\u4F18\u5316\u548C\u4E3A\u4E86\u5E94\u5BF9\u9AD8\u5CF0\u8BF7\u6C42\u7684\u5FEB\u901F\u54CD\u5E94\u5F3A\u70C8\u4E0D\u5EFA\u8BAE\u8BBE\u7F6E\u8BE5\u5C5E\u6027\uFF0C\u8BA9HikariCP\u8FDE\u63A5\u6C60\u4FDD\u6301\u56FA\u5B9A\u5927\u5C0F\u3002
#\u7F3A\u7701\uFF1A\u8DDFmaximumPoolSize\u76F8\u540C
#\u6700\u4F73\u5B9E\u8DF5\uFF1A\u4FDD\u6301\u7F3A\u7701\uFF0C\u8BA9\u8FDE\u63A5\u6C60\u56FA\u5B9A\u5927\u5C0F\uFF0C\u907F\u514D\u6269\u7F29\u5BB9\u5E26\u6765\u7684\u6027\u80FD\u5F71\u54CD
spring.datasource.hikari.minimum-idle=${SPRING_DATASOURCE_MINIMUM_IDLE:5}
spring.datasource.hikari.read-only=${SPRING_DATASOURCE_READ_ONLY:false}
#JPA
#\u914D\u7F6E\u5728\u65E5\u5FD7\u4E2D\u6253\u5370\u51FA\u6267\u884C\u7684 SQL \u8BED\u53E5\u4FE1\u606F
spring.jpa.show-sql=false
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.order_by.default_null_ordering=last
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
#spring.jpa.properties.hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS= 2000
spring.data.jpa.repositories.enabled=true
spring.jpa.open-in-view=false
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
spring.jpa.properties.hibernate.jdbc.time_zone=GMT+8
spring.jpa.properties.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.batch_size=500
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
#\u6BCF\u4E2A\u4F1A\u8BDD\u7684\u6700\u91CD\u8981\u4FE1\u606F\u7684\u5B50\u96C6sql\u6253\u5370
spring.jpa.properties.hibernate.generate_statistics=false
spring.jackson.time-zone=GMT+8
spring.jackson.mapper.SORT_PROPERTIES_ALPHABETICALLY=true
spring.jackson.serialization.ORDER_MAP_ENTRIES_BY_KEYS=true
spring.jpa.properties.hibernate.event.merge.entity_copy_observer=allow
###################kafka#########################################
#\u662F\u5426\u542F\u52A8\u6D88\u8D39\u76D1\u542C
spring.kafka.auto-startup=false
spring.kafka.bootstrap-servers=210.21.52.70:9092
#producer
# \u5199\u5165\u5931\u8D25\u65F6\uFF0C\u91CD\u8BD5\u6B21\u6570\u3002\u5F53leader\u8282\u70B9\u5931\u6548\uFF0C\u4E00\u4E2Arepli\u8282\u70B9\u4F1A\u66FF\u4EE3\u6210\u4E3Aleader\u8282\u70B9\uFF0C\u6B64\u65F6\u53EF\u80FD\u51FA\u73B0\u5199\u5165\u5931\u8D25\uFF0C
# \u5F53retris\u4E3A0\u65F6\uFF0Cproduce\u4E0D\u4F1A\u91CD\u590D\u3002retirs\u91CD\u53D1\uFF0C\u6B64\u65F6repli\u8282\u70B9\u5B8C\u5168\u6210\u4E3Aleader\u8282\u70B9\uFF0C\u4E0D\u4F1A\u4EA7\u751F\u6D88\u606F\u4E22\u5931\u3002
spring.kafka.producer.retries=0
#procedure\u8981\u6C42leader\u5728\u8003\u8651\u5B8C\u6210\u8BF7\u6C42\u4E4B\u524D\u6536\u5230\u7684\u786E\u8BA4\u6570\uFF0C\u7528\u4E8E\u63A7\u5236\u53D1\u9001\u8BB0\u5F55\u5728\u670D\u52A1\u7AEF\u7684\u6301\u4E45\u5316\uFF0C\u5176\u503C\u53EF\u4EE5\u4E3A\u5982\u4E0B\uFF1A
#acks = 0 \u5982\u679C\u8BBE\u7F6E\u4E3A\u96F6\uFF0C\u5219\u751F\u4EA7\u8005\u5C06\u4E0D\u4F1A\u7B49\u5F85\u6765\u81EA\u670D\u52A1\u5668\u7684\u4EFB\u4F55\u786E\u8BA4\uFF0C\u8BE5\u8BB0\u5F55\u5C06\u7ACB\u5373\u6DFB\u52A0\u5230\u5957\u63A5\u5B57\u7F13\u51B2\u533A\u5E76\u89C6\u4E3A\u5DF2\u53D1\u9001\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u65E0\u6CD5\u4FDD\u8BC1\u670D\u52A1\u5668\u5DF2\u6536\u5230\u8BB0\u5F55\uFF0C\u5E76\u4E14\u91CD\u8BD5\u914D\u7F6E\u5C06\u4E0D\u4F1A\u751F\u6548\uFF08\u56E0\u4E3A\u5BA2\u6237\u7AEF\u901A\u5E38\u4E0D\u4F1A\u77E5\u9053\u4EFB\u4F55\u6545\u969C\uFF09\uFF0C\u4E3A\u6BCF\u6761\u8BB0\u5F55\u8FD4\u56DE\u7684\u504F\u79FB\u91CF\u59CB\u7EC8\u8BBE\u7F6E\u4E3A-1\u3002
#acks = 1 \u8FD9\u610F\u5473\u7740leader\u4F1A\u5C06\u8BB0\u5F55\u5199\u5165\u5176\u672C\u5730\u65E5\u5FD7\uFF0C\u4F46\u65E0\u9700\u7B49\u5F85\u6240\u6709\u526F\u672C\u670D\u52A1\u5668\u7684\u5B8C\u5168\u786E\u8BA4\u5373\u53EF\u505A\u51FA\u56DE\u5E94\uFF0C\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5982\u679Cleader\u5728\u786E\u8BA4\u8BB0\u5F55\u540E\u7ACB\u5373\u5931\u8D25\uFF0C\u4F46\u5728\u5C06\u6570\u636E\u590D\u5236\u5230\u6240\u6709\u7684\u526F\u672C\u670D\u52A1\u5668\u4E4B\u524D\uFF0C\u5219\u8BB0\u5F55\u5C06\u4F1A\u4E22\u5931\u3002
#acks = all \u8FD9\u610F\u5473\u7740leader\u5C06\u7B49\u5F85\u5B8C\u6574\u7684\u540C\u6B65\u526F\u672C\u96C6\u4EE5\u786E\u8BA4\u8BB0\u5F55\uFF0C\u8FD9\u4FDD\u8BC1\u4E86\u53EA\u8981\u81F3\u5C11\u4E00\u4E2A\u540C\u6B65\u526F\u672C\u670D\u52A1\u5668\u4ECD\u7136\u5B58\u6D3B\uFF0C\u8BB0\u5F55\u5C31\u4E0D\u4F1A\u4E22\u5931\uFF0C\u8FD9\u662F\u6700\u5F3A\u6709\u529B\u7684\u4FDD\u8BC1\uFF0C\u8FD9\u76F8\u5F53\u4E8Eacks = -1\u7684\u8BBE\u7F6E\u3002
#\u53EF\u4EE5\u8BBE\u7F6E\u7684\u503C\u4E3A\uFF1Aall, -1, 0, 1
spring.kafka.producer.acks=1
spring.kafka.producer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.properties.sasl.mechanism=PLAIN
spring.kafka.producer.properties.security.protocol=SASL_PLAINTEXT
##\u6CE8\u610F\uFF0C\u8FD9\u91CC\u914D\u7F6Esasl\u7684\u8D26\u53F7\u5BC6\u7801\u5FC5\u987B\u52A0\u53CC\u5F15\u53F7\uFF0C\u5426\u5219\u5728\u586B\u5165\u503C\u9996\u5B57\u7B26\u4E3A\u6570\u5B57\u7684\u60C5\u51B5\u4E0B\u8BFB\u53D6\u4E0D\u5230\u53C2\u6570
spring.kafka.producer.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required  username="gosuncn" password="hd29h8hf0j";
#consumer
spring.kafka.consumer.group-id=sk_vpp
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=100
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.sasl.mechanism=PLAIN
spring.kafka.consumer.properties.security.protocol=SASL_PLAINTEXT
##\u6CE8\u610F\uFF0C\u8FD9\u91CC\u914D\u7F6Esasl\u7684\u8D26\u53F7\u5BC6\u7801\u5FC5\u987B\u52A0\u53CC\u5F15\u53F7\uFF0C\u5426\u5219\u5728\u586B\u5165\u503C\u9996\u5B57\u7B26\u4E3A\u6570\u5B57\u7684\u60C5\u51B5\u4E0B\u8BFB\u53D6\u4E0D\u5230\u53C2\u6570
spring.kafka.consumer.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required  username="gosuncn" password="hd29h8hf0j";

# Kafka alarm
spring.kafka.alarm.performance.bootstrap-servers=
spring.kafka.alarm.performance.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.alarm.performance.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.alarm.performance.topic =
spring.kafka.alarm.device.topic =
spring.kafka.alarm.key =
forest.variables.serviceIp =

# xiaoda url
xiaoda.url = http://47.101.212.93:18909

# \u8682\u8681\u57DF\u540D\u5730\u5740
mayi.domain.url=http://zkdefininstchannel-1.gzz8c.stable.alipay.net
