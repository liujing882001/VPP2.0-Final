name: VPP System CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # 每周一凌晨2点运行安全扫描

env:
  PYTHON_VERSION: '3.9'
  JAVA_VERSION: '11'
  NODE_VERSION: '16'

jobs:
  # =============================================================================
  # 🔍 代码质量检查
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-lock.txt') }}
        
    - name: Install Python dependencies
      run: |
        cd VPP_Algorithm-main
        pip install -r requirements-lock.txt
        
    - name: Python Code Quality
      run: |
        cd VPP_Algorithm-main
        # 代码格式检查
        black --check --diff .
        
        # 导入排序检查
        isort --check-only --diff .
        
        # 代码风格检查
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
        # 类型检查
        mypy . --ignore-missing-imports
        
        # 安全检查
        bandit -r . -x tests/ -f json -o bandit-report.json
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: VPP_Algorithm-main/bandit-report.json

  # =============================================================================
  # 🧪 Python算法服务测试
  # =============================================================================
  test-python:
    name: Python Algorithm Service Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: vpp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd VPP_Algorithm-main
        pip install -r requirements-lock.txt
        
    - name: Run tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: vpp_test
        DB_USERNAME: postgres
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd VPP_Algorithm-main
        # 运行测试套件
        pytest tests/ -v --cov=. --cov-report=xml --cov-fail-under=80
        
        # 性能测试
        pytest tests/test_performance.py -v --benchmark-only
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./VPP_Algorithm-main/coverage.xml
        flags: python
        name: python-coverage

  # =============================================================================
  # ☕ Java后端服务测试
  # =============================================================================
  test-java:
    name: Java Backend Service Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        
    - name: Run Java tests
      run: |
        cd VPP-demo-main
        mvn clean test
        
    - name: Generate test report
      run: |
        cd VPP-demo-main
        mvn jacoco:report
        
    - name: Upload Java coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./VPP-demo-main/target/site/jacoco/jacoco.xml
        flags: java
        name: java-coverage

  # =============================================================================
  # 🌐 前端测试
  # =============================================================================
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: VPP-WEB-demo-de-main/package-lock.json
        
    - name: Install dependencies
      run: |
        cd VPP-WEB-demo-de-main
        npm ci
        
    - name: Run linting
      run: |
        cd VPP-WEB-demo-de-main
        npm run lint
        
    - name: Run tests
      run: |
        cd VPP-WEB-demo-de-main
        npm test -- --coverage --watchAll=false
        
    - name: Build application
      run: |
        cd VPP-WEB-demo-de-main
        npm run build

  # =============================================================================
  # 🔒 安全扫描
  # =============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Python dependency check
      run: |
        cd VPP_Algorithm-main
        pip install safety
        safety check -r requirements-lock.txt --json --output safety-report.json
        
    - name: Node.js audit
      run: |
        cd VPP-WEB-demo-de-main
        npm audit --audit-level=moderate --json > npm-audit.json || true

  # =============================================================================
  # 🐳 Docker构建
  # =============================================================================
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-python, test-java, test-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Python service
      uses: docker/build-push-action@v4
      with:
        context: ./VPP_Algorithm-main
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/vpp-algorithm:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/vpp-algorithm:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Java service
      uses: docker/build-push-action@v4
      with:
        context: ./VPP-demo-main
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/vpp-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/vpp-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./VPP-WEB-demo-de-main
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/vpp-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/vpp-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # 🚀 生产部署
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Kubernetes
      run: |
        # 这里添加部署到K8s的脚本
        echo "Deploying to production..."
        # kubectl apply -f k8s/
        
    - name: Health check
      run: |
        sleep 30
        # curl -f https://vpp-api.example.com/health || exit 1
        echo "Health check completed"
        
    - name: Notify deployment success
      run: |
        echo "Deployment completed successfully"
        # 可以集成Slack、Teams等通知服务

  # =============================================================================
  # 📊 性能测试
  # =============================================================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run load tests
      run: |
        # 使用k6或其他工具进行负载测试
        echo "Running performance tests..."
        
    - name: Generate performance report
      run: |
        echo "Generating performance report..."

  # =============================================================================
  # 🧹 清理工作
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [performance-test]
    if: always()
    
    steps:
    - name: Clean up old Docker images
      run: |
        # 清理旧的Docker镜像
        echo "Cleaning up old images..."
        
    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: build-artifacts
        path: |
          **/*.log
          **/*-report.json
        retention-days: 30 