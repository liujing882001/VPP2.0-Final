version: '3.8'

services:
  # 前端React应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_AI_SERVICE_URL=http://localhost:8001
      - REACT_APP_ENV=development
    depends_on:
      - backend
      - ai-service

  # 后端FastAPI服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql://deepengine:password@postgres:5432/deepengine_db
      - REDIS_URL=redis://redis:6379/0
      - AI_SERVICE_URL=http://ai-service:8001
      - ENV=development
    depends_on:
      - postgres
      - redis
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # AI算法服务
  ai-service:
    build:
      context: ./ai-algorithms
      dockerfile: Dockerfile.dev
    ports:
      - "8001:8001"
    volumes:
      - ./ai-algorithms:/app
      - ai-models:/app/models
    environment:
      - MODEL_PATH=/app/models
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - ENV=development
    depends_on:
      - mlflow
    command: python -m serving.main --host 0.0.0.0 --port 8001

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=deepengine_db
      - POSTGRES_USER=deepengine
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # InfluxDB时序数据库
  influxdb:
    image: influxdb:2.7-alpine
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=deepengine
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=deepengine
      - DOCKER_INFLUXDB_INIT_BUCKET=energy_data
    volumes:
      - influxdb_data:/var/lib/influxdb2

  # MLflow模型注册中心
  mlflow:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
      - ./ai-algorithms:/workspace
    working_dir: /workspace
    command: >
      sh -c "
        pip install mlflow==2.8.1 &&
        mlflow server 
          --backend-store-uri sqlite:////mlflow/mlflow.db
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
      "

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning

  # Kafka消息队列
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  mlflow_data:
  ai-models:
  prometheus_data:
  grafana_data:
  kafka_data:
  zookeeper_data:

networks:
  default:
    name: deepengine-network 